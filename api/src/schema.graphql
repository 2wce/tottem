### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

type Collection {
    date: String
    detail: String
    id: ID!
    items(
        after: String
        before: String
        first: Int
        last: Int
        skip: Int
    ): [Item!]!
    name: String!
    owner: User!
    section: Section!
}

input CollectionFilter {
    every: CollectionWhereInput
    none: CollectionWhereInput
    some: CollectionWhereInput
}

input CollectionWhereInput {
    AND: [CollectionWhereInput!]
    date: NullableStringFilter
    detail: NullableStringFilter
    id: StringFilter
    items: ItemFilter
    name: StringFilter
    NOT: [CollectionWhereInput!]
    OR: [CollectionWhereInput!]
    owner: UserWhereInput
    section: SectionWhereInput
}

input IntFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: Int
    notIn: [Int!]
}

type Item {
    author: String!
    comment: String
    id: ID!
    imageUrl: String
    productUrl: String!
    title: String!
    type: ItemType!
}

input ItemFilter {
    every: ItemWhereInput
    none: ItemWhereInput
    some: ItemWhereInput
}

enum ItemType {
    album
    book
    movie
    paper
    people
    podcast
    video
}

input ItemWhereInput {
    AND: [ItemWhereInput!]
    author: StringFilter
    collection: CollectionWhereInput
    comment: NullableStringFilter
    id: StringFilter
    imageUrl: NullableStringFilter
    NOT: [ItemWhereInput!]
    OR: [ItemWhereInput!]
    productUrl: StringFilter
    title: StringFilter
    type: ItemType
}

input NullableStringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: String
    notIn: [String!]
    startsWith: String
}

enum OrderByArg {
    asc
    desc
}

type Query {
    collections(
        after: String
        before: String
        first: Int
        last: Int
        orderBy: QueryCollectionsOrderByInput
        skip: Int
        where: QueryCollectionsWhereInput
    ): [Collection!]!
    user(where: UserWhereUniqueInput!): User
}

input QueryCollectionsOrderByInput {
    date: OrderByArg
}

input QueryCollectionsWhereInput {
    owner: UserWhereInput
    section: SectionWhereInput
}

type Section {
    collections(
        after: String
        before: String
        first: Int
        last: Int
        skip: Int
    ): [Collection!]!
    id: ID!
    index: Int!
    name: String!
}

input SectionFilter {
    every: SectionWhereInput
    none: SectionWhereInput
    some: SectionWhereInput
}

input SectionWhereInput {
    AND: [SectionWhereInput!]
    collections: CollectionFilter
    id: StringFilter
    index: IntFilter
    name: StringFilter
    NOT: [SectionWhereInput!]
    OR: [SectionWhereInput!]
    owner: UserWhereInput
}

input SocialWhereInput {
    AND: [SocialWhereInput!]
    github: NullableStringFilter
    id: StringFilter
    linkedin: NullableStringFilter
    mail: NullableStringFilter
    NOT: [SocialWhereInput!]
    OR: [SocialWhereInput!]
    user: UserWhereInput
    website: NullableStringFilter
    youtube: NullableStringFilter
}

input StringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: String
    notIn: [String!]
    startsWith: String
}

type User {
    biography: String!
    firstname: String!
    id: ID!
    sections(
        after: String
        before: String
        first: Int
        last: Int
        skip: Int
    ): [Section!]!
    slug: String!
}

input UserWhereInput {
    AND: [UserWhereInput!]
    biography: StringFilter
    collections: CollectionFilter
    firstname: StringFilter
    id: StringFilter
    label: NullableStringFilter
    NOT: [UserWhereInput!]
    OR: [UserWhereInput!]
    sections: SectionFilter
    slug: StringFilter
    social: SocialWhereInput
}

input UserWhereUniqueInput {
    id: ID
    slug: String
}
