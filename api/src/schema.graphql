### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

type Collection {
    date: String
    detail: String
    id: ID!
    items(
        after: String
        before: String
        first: Int
        last: Int
        skip: Int
    ): [Item!]!
    name: String!
}

input CollectionCreateManyWithoutCollectionsInput {
    connect: [CollectionWhereUniqueInput!]
    create: [CollectionCreateWithoutSectionInput!]
}

input CollectionCreateWithoutSectionInput {
    date: String
    detail: String
    id: ID
    items: ItemCreateManyWithoutItemsInput
    name: String!
}

input CollectionWhereUniqueInput {
    id: ID
}

type Item {
    author: String!
    comment: String
    id: ID!
    imageUrl: String
    productUrl: String!
    title: String!
}

input ItemCreateManyWithoutItemsInput {
    connect: [ItemWhereUniqueInput!]
    create: [ItemCreateWithoutCollectionInput!]
}

input ItemCreateWithoutCollectionInput {
    author: String!
    comment: String
    id: ID
    imageUrl: String
    productUrl: String!
    title: String!
    type: ItemType!
}

enum ItemType {
    album
    book
    movie
    paper
    people
    podcast
    video
}

input ItemWhereUniqueInput {
    id: ID
}

type Mutation {
    createOneUser(data: UserCreateInput!): User!
    deleteOneUser(where: UserWhereUniqueInput!): User
}

type Query {
    user(where: UserWhereUniqueInput!): User
}

type Section {
    collections(
        after: String
        before: String
        first: Int
        last: Int
        skip: Int
    ): [Collection!]!
    id: ID!
    index: Int!
    name: String!
}

input SectionCreateManyWithoutSectionsInput {
    connect: [SectionWhereUniqueInput!]
    create: [SectionCreateWithoutAuthorInput!]
}

input SectionCreateWithoutAuthorInput {
    collections: CollectionCreateManyWithoutCollectionsInput
    id: ID
    index: Int
    name: String!
}

input SectionWhereUniqueInput {
    id: ID
}

input SocialCreateOneWithoutSocialInput {
    connect: SocialWhereUniqueInput
    create: SocialCreateWithoutUserInput
}

input SocialCreateWithoutUserInput {
    github: String
    id: ID
    linkedin: String
    mail: String
    website: String
    youtube: String
}

input SocialWhereUniqueInput {
    id: ID
}

type User {
    biography: String!
    firstname: String!
    id: ID!
    sections(
        after: String
        before: String
        first: Int
        last: Int
        skip: Int
    ): [Section!]!
    slug: String!
}

input UserCreateInput {
    biography: String!
    firstname: String!
    id: ID
    label: String
    sections: SectionCreateManyWithoutSectionsInput
    slug: String!
    social: SocialCreateOneWithoutSocialInput
}

input UserWhereUniqueInput {
    id: ID
    slug: String
}
