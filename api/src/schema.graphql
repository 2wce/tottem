### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly

input BooleanFilter {
    equals: Boolean
    not: Boolean
}

input CategoryCreateManyWithoutCategoriesInput {
    connect: [CategoryWhereUniqueInput!]
    create: [CategoryCreateWithoutPostsInput!]
}

input CategoryCreateWithoutPostsInput {
    id: ID
    name: String!
}

input CategoryFilter {
    every: CategoryWhereInput
    none: CategoryWhereInput
    some: CategoryWhereInput
}

input CategoryWhereInput {
    AND: [CategoryWhereInput!]
    id: StringFilter
    name: StringFilter
    NOT: [CategoryWhereInput!]
    OR: [CategoryWhereInput!]
    posts: PostFilter
}

input CategoryWhereUniqueInput {
    id: ID
}

type Mutation {
    createOnePost(data: PostCreateInput!): Post!
    createOneUser(data: UserCreateInput!): User!
    deleteOnePost(where: PostWhereUniqueInput!): Post
    deleteOneUser(where: UserWhereUniqueInput!): User
}

input NullableStringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: String
    notIn: [String!]
    startsWith: String
}

enum OrderByArg {
    asc
    desc
}

type Post {
    id: ID!
}

input PostCreateInput {
    author: UserCreateOneWithoutAuthorInput
    categories: CategoryCreateManyWithoutCategoriesInput
    content: String
    id: ID
    published: Boolean
    title: String!
}

input PostCreateManyWithoutPostsInput {
    connect: [PostWhereUniqueInput!]
    create: [PostCreateWithoutAuthorInput!]
}

input PostCreateWithoutAuthorInput {
    categories: CategoryCreateManyWithoutCategoriesInput
    content: String
    id: ID
    published: Boolean
    title: String!
}

input PostFilter {
    every: PostWhereInput
    none: PostWhereInput
    some: PostWhereInput
}

input PostWhereInput {
    AND: [PostWhereInput!]
    author: UserWhereInput
    categories: CategoryFilter
    content: NullableStringFilter
    id: StringFilter
    NOT: [PostWhereInput!]
    OR: [PostWhereInput!]
    published: BooleanFilter
    title: StringFilter
}

input PostWhereUniqueInput {
    id: ID
}

type Query {
    post(where: PostWhereUniqueInput!): Post
    posts(
        after: String
        before: String
        first: Int
        last: Int
        skip: Int
        where: PostWhereInput
    ): [Post!]!
    user(where: UserWhereUniqueInput!): User
    users(
        after: String
        before: String
        first: Int
        last: Int
        orderBy: UserOrderByInput
        skip: Int
    ): [User!]!
}

input StringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: String
    notIn: [String!]
    startsWith: String
}

type User {
    email: String!
    id: ID!
    posts(
        after: String
        before: String
        first: Int
        last: Int
        skip: Int
    ): [Post!]!
}

input UserCreateInput {
    email: String!
    id: ID
    name: String
    posts: PostCreateManyWithoutPostsInput
}

input UserCreateOneWithoutAuthorInput {
    connect: UserWhereUniqueInput
    create: UserCreateWithoutPostsInput
}

input UserCreateWithoutPostsInput {
    email: String!
    id: ID
    name: String
}

input UserOrderByInput {
    email: OrderByArg
    id: OrderByArg
    name: OrderByArg
}

input UserWhereInput {
    AND: [UserWhereInput!]
    email: StringFilter
    id: StringFilter
    name: NullableStringFilter
    NOT: [UserWhereInput!]
    OR: [UserWhereInput!]
    posts: PostFilter
}

input UserWhereUniqueInput {
    email: String
    id: ID
}
